class Solution {
public:
    string reorganizeString(string s) {
        priority_queue<pair<int,char>>pq;
        map<char,int>m;
        for(auto c: s){
            m[c]++;
        }
        for(auto x: m){
            pq.push({x.second,x.first});
        }
        string res="";
        while(pq.size()>1){
            pair<int,char>top1=pq.top();
            pq.pop();
            pair<int,char>top2=pq.top();
            pq.pop();

            res+=top1.second;
            res+=top2.second;

            top1.first--;
            top2.first--;

            if(top1.first>0){
                pq.push(top1);
            }
            if(top2.first>0){
                pq.push(top2);
            }
        }
        if(pq.size()==1){
            if(pq.top().first>1)return "";
            if(pq.top().first==1){
                res+=pq.top().second;
            }
        }
        return res;
    }
};


//using map only-- efficent

class Solution {
public:
    string reorganizeString(string s) {
        map<char,int>m;
        for(auto c: s)m[c]++;
        char mostFreq;
        int c=0;
        for(auto x: m){
            if(x.second>c){
                mostFreq=x.first;
                c=x.second;
            }
        }
        
        if(c>(s.size()+1)/2)return "";
        int i=0;
        while(m[mostFreq]){
            s[i]=mostFreq;
            i+=2;
            m[mostFreq]--;
        }
        for(auto x: m){
            while(x.second>0){
                if(i>=s.size())i=1;
                s[i]=x.first;
                x.second--;
                i+=2;
            }
        }
        return s;
    }
};
